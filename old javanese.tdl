;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Old Javanese
;;; created at:
;;;     Tue Jul 17 08:36:43 UTC 2018
;;; based on Matrix customization system version of:
;;;     Tue May 22 21:45:46 UTC 2018
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ PRON bool,
    AUX bool,
    POSSESSOR poss,
    SPEC-INIT bool,
    FORM form,
    EMPTY bool ].

png :+ [ PER person ].

; Introducing VC keeps track whether main-verb is present in cluster

cat :+ [ POSSESSUM poss,
    VC luk ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-comp-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc,
    SYNSEM.LOCAL.CAT [ MC #mc,
                       VC #vc ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VC #vc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

lex-rule :+ [ SYNSEM.LOCAL.CAT.VC #vc,
    DTR.SYNSEM.LOCAL.CAT.VC #vc ].

inflected :+ [ VOICE-FLAG luk ].

infl-satisfied :+ [ VOICE-FLAG na-or-+ ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Mood

realis := mood.
irrealis := mood.

common := noun.

copula := verb.

poss_rel := predsort.

copula_v_rel := predsort.
cop_v_zero_rel := copula_v_rel.


;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT [ VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] >,
                                      HEAD.SPEC-INIT + ] ] ].

common-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD common,
                   CONT.HOOK.INDEX.PNG.PER 3rd ] ].

pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

first-pron-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 1st ] ].

second-pron-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 2nd ] ].

third-pron-noun-lex := pronoun-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG.PER 3rd ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VC +,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT [ VC -,
                       HEAD [ AUX +,
                              SPEC-INIT + ] ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    SYNSEM.LOCAL.CAT [ VAL.COMPS < #comps >,
                       HEAD.SPEC-INIT + ] ].

intr-verb-lex := intransitive-verb-lex.

tr-verb-lex := transitive-verb-lex.

;;; Auxiliaries

arg-comp-aux := aux-lex & basic-two-arg &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps . #vcomps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CAT [ VAL [ SUBJ < [ ] >,
                                   COMPS #vcomps ],
                             HEAD verb ],
                       CONT.HOOK.XARG #xarg ] ] > ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

arg-comp-aux-with-pred := arg-comp-aux & hcons-lex-item &
  [ SYNSEM [ LOCAL.CONT.HCONS <! qeq &
                                 [ HARG #harg,
                                   LARG #larg ] !>,
             LKEYS.KEYREL event-relation &
                          [ ARG1 #harg ] ],
    ARG-ST < [ ],
             [ LOCAL.CONT.HOOK.LTOP #larg ] > ].

neg-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

head-subj-phrase := decl-head-subj-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VC + ].

;poss-unary-phrase-1 := [ SYNSEM.LOCAL.CAT.HEAD.SPEC-INIT - ].

head-spec-phrase-2 := head-initial & basic-head-spec-phrase &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT -,
                                    VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM.LOCAL [ CONT.HOOK #hook,
                   CAT [ HEAD det &
                              [ POSSESSOR possessor ],
                         VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < >,
                               SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                      HEAD noun &
                                                           [ PRON - ] ],
                                                CONT.HOOK #hook &
                                                          [ INDEX #possessum &
                                                                  [ COG-ST uniq-id ],
                                                            LTOP #lbl ] ] ] > ] ] ],
    C-CONT [ RELS <! arg12-ev-relation &
                     [ PRED "poss_rel",
                       LBL #lbl,
                       ARG1 #possessum,
                       ARG2 #possessor ], quant-relation &
                                          [ PRED "exist_q_rel",
                                            ARG0 #possessum,
                                            RSTR #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #lbl ] !>,
             ICONS <!  !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ VAL [ SPR < >,
                                        COMPS < >,
                                        SUBJ < >,
                                        SPEC < > ],
                                  HEAD +np ],
                            CONT.HOOK.INDEX #possessor ] ] > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

compound-noun-pronoun-phrase := head-initial & 
 [ SYNSEM [ LOCAL [ CAT [ VAL [ SPR < #spr >,
                                COMPS < > ] ],
                    CONT.HOOK #head ] ],
   HEAD-DTR.SYNSEM [ MODIFIED notmod-or-rmod & [ PERIPH na-or-+ ],
                     LOCAL [ CAT [ HEAD common,
                                   VAL [ SPR < #spr >,
                                         COMPS < > ]] ,
                             CONT [ HOOK #head &
                                        [INDEX #externalargument,
                                         LTOP #lbl ] ] ] ],
   NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD noun & [ PRON + ],
                                     VAL [ SPR < >,
                                           COMPS < > ] ],
                               CONT.HOOK.INDEX #internalargument],
   C-CONT [ RELS <! arg12-ev-relation & [ PRED poss_rel,
                                          LBL #lbl,
                                          ARG1 #externalargument,
                                          ARG2 #internalargument] !>,
            HCONS <! !> ] ].

zero-cop-rule := unary-phrase &
 [ SYNSEM.LOCAL [ CONT [ HOOK [ INDEX #v0,
                                LTOP #vl,
                                XARG #x1 ] ],
		  COORD -,
                  CAT [ HEAD copula &
			     [ EMPTY + ],
                        VAL [ COMPS < >,
                              SPR < >,
                              SPEC < >,
                              SUBJ < [ LOCAL [ CAT [ HEAD noun,
						     VAL [ SPR < >,
                                     			   COMPS < > ] ],
                           		       CONT.HOOK.INDEX #x1 ] ] > ] ] ] ,
   ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun &
				      [ EMPTY - ],
                                 VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #x2,
			   COORD - ] ] > ,
   C-CONT [ RELS <! [ LBL #vl,
                      PRED cop_v_zero_rel,
                      ARG0 #v0,
                      ARG1 #x1,
                      ARG2 #x2 ] !> ] ].

act-lex-rule := active-voice-lex-rule-super.

active-voice-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & transitive-verb-lex &
  [ INFLECTED.VOICE-FLAG +,
    DTR tr-verb-lex ].
